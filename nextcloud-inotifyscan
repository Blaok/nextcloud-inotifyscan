#!/usr/bin/python
import fcntl
import os
import subprocess
import sys
import time

def require_environ(var):
    if var not in os.environ:
        sys.stderr.write('ERROR: %s not set\n' % var)
        sys.exit(1)
    return os.environ[var]

def main():
    interval = float(os.environ.get('INTERVAL', 1.))
    user_name = require_environ('USER_NAME')
    if os.environ.get('USE_DOCKER') == 'True':
        docker_user = require_environ('DOCKER_USER')
        docker_container = require_environ('DOCKER_CONTAINER')
        occ_cmd = 'occ'
        cmd_prefix = ['docker', 'exec',  '-u'+docker_user, docker_container]
    else:
        nextcloud_home = require_environ('NEXTCLOUD_HOME')
        occ_cmd = nextcloud_home+'/occ'
        cmd_prefix = []
    data_prefix = os.environ.get('DATA_DIR')
    if data_prefix is None:
        try:
            data_prefix = os.environ['NEXTCLOUD_HOME']+'/data'
        except KeyError:
            sys.stderr.write('ERROR: neither DATA_DIR nor NEXTCLOUD_HOME set\n')
    data_prefix_len = len(data_prefix)
    scan_paths = set()
    inotifywait_proc = subprocess.Popen(['inotifywait', '--event', 'create,modify,move,delete', '--exclude', '/\.', '--recursive', data_prefix+'/'+user_name+'/files', '--quiet', '--format', '%e/%f%w/', '--monitor'], stdout=subprocess.PIPE, bufsize=0)
    inotifywait_fd = inotifywait_proc.stdout.fileno()
    inotifywait_fl = fcntl.fcntl(inotifywait_fd, fcntl.F_GETFL)
    while True:
        event = ''
        file_name = ''
        file_path = ''
        while True:
            fcntl.fcntl(inotifywait_fd, fcntl.F_SETFL, inotifywait_fl|os.O_NONBLOCK)
            try:
                c = inotifywait_proc.stdout.read(1)
            except:
                for p in scan_paths:
                    sys.stderr.write('Scan for %s\n' % p)
                    subprocess.call(cmd_prefix+['php', occ_cmd, 'files:scan', '--no-interaction', '--path='+p, '--shallow'])
                scan_paths = set()
                time.sleep(interval)
                continue
            fcntl.fcntl(inotifywait_fd, fcntl.F_SETFL, inotifywait_fl)
            if c != '/':
                event += c
            else:
                while True:
                    c = inotifywait_proc.stdout.read(1)
                    if c != '/':
                        file_name += c
                    else:
                        lastc = ''
                        while True:
                            lastlastc = lastc
                            lastc = c
                            c = inotifywait_proc.stdout.read(1)
                            if c == '\n' and lastc == '/' and lastlastc == '/':
                                break
                            else:
                                file_path += lastc
                        break
                break
        if set(event.split(',')) & {'CREATE', 'MODIFY'}:
            scan_path = file_path+file_name
        else:
            scan_path = file_path
        if data_prefix == scan_path[:data_prefix_len]:
            scan_path = scan_path[data_prefix_len:]
        sys.stderr.write('Found %s %s %s\n' % (file_path, event, file_name))
        scan_paths |= {scan_path}

if __name__ == '__main__':
    main()
