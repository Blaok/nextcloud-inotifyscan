#!/usr/bin/python
from __future__ import print_function

import atexit
import fcntl
import os
import signal
import subprocess
import sys
import time

def cleanup(proc):
  proc.kill()

def read_char(fd, hook=lambda: None, hook_args=()):
  try:
    char = fd.read(1)
    # Python 3 timeout
    if char is None:
      hook(*hook_args)
      return None
  # Python 2 timeout
  except IOError:
    hook(*hook_args)
    return None
  return char

def require_environ(var):
  if var not in os.environ:
    sys.stderr.write('ERROR: %s not set\n' % var)
    sys.exit(1)
  return os.environ[var]

def main():
  signal.signal(signal.SIGINT, signal.default_int_handler)
  interval = float(os.environ.get('INTERVAL', 1.))
  user_name = require_environ('USER_NAME')
  if os.environ.get('USE_DOCKER') == 'True':
    docker_user = require_environ('DOCKER_USER')
    docker_container = require_environ('DOCKER_CONTAINER')
    occ_cmd = ['docker', 'exec', '-u'+docker_user, docker_container,
               'php', 'occ']
  else:
    nextcloud_home = require_environ('NEXTCLOUD_HOME')
    occ_cmd = ['php', nextcloud_home+'/occ']
  data_prefix = subprocess.check_output(
      occ_cmd+['config:system:get', 'datadirectory'],
      universal_newlines=True).rstrip()
  data_prefix_len = len(data_prefix)
  scan_paths = set()
  inotifywait_proc = subprocess.Popen(
      ['inotifywait', '--event', 'create,modify,move,delete', '--exclude',
       r'/\.', '--recursive', data_prefix+'/'+user_name+'/files', '--quiet',
       '--format', '%e/%f%w/', '--monitor'],
      stdout=subprocess.PIPE, bufsize=0)
  atexit.register(cleanup, inotifywait_proc)
  inotifywait_fd = inotifywait_proc.stdout.fileno()
  inotifywait_fl = fcntl.fcntl(inotifywait_fd, fcntl.F_GETFL)
  def polling_task():
    for p in scan_paths:
      sys.stderr.write('Scan for %s\n' % p)
      subprocess.call(occ_cmd+['files:scan', '--no-interaction', '--path='+p,
                               '--shallow'])
    scan_paths.clear()
    time.sleep(interval)
  while True:
    event = b''
    file_name = b''
    file_path = b''
    while True:
      fcntl.fcntl(inotifywait_fd, fcntl.F_SETFL, inotifywait_fl|os.O_NONBLOCK)
      c = read_char(inotifywait_proc.stdout, polling_task)
      if c is None:
        continue
      fcntl.fcntl(inotifywait_fd, fcntl.F_SETFL, inotifywait_fl)
      if c != b'/':
        event += c
      else:
        while True:
          c = read_char(inotifywait_proc.stdout)
          if c != b'/':
            file_name += c
          else:
            lastc = b''
            while True:
              lastlastc = lastc
              lastc = c
              c = read_char(inotifywait_proc.stdout)
              if c == b'\n' and lastc == b'/' and lastlastc == b'/':
                break
              else:
                file_path += lastc
            break
        break
    event = event.decode('utf-8')
    file_name = file_name.decode('utf-8')
    file_path = file_path.decode('utf-8')
    if set(event.split(',')) & {'CREATE', 'MODIFY'}:
      scan_path = file_path+file_name
    else:
      scan_path = file_path
    if data_prefix == scan_path[:data_prefix_len]:
      scan_path = scan_path[data_prefix_len:]
    sys.stderr.write('Found %s %s %s\n' % (file_path, event, file_name))
    scan_paths |= {scan_path}

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    sys.exit(0)
